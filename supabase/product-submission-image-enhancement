import "jsr:@supabase/functions-js/edge-runtime.d.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.49.9";
const url = Deno.env.get("SUPABASE_URL");
const key = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
const supabase = createClient(url, key);
const CLOUDINARY_CLOUD_NAME = Deno.env.get("CLOUDINARY_CLOUD_NAME");
const CLOUDINARY_UPLOAD_PRESET = "unsigned_default";
const CIRCLE_X_BASE_URL = Deno.env.get("CIRCLE_X_BASE_URL");
const ENHANCE_API_URL = `${CIRCLE_X_BASE_URL}/api/enhance`;
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type"
};
function errorResponse(message, status = 400) {
  return new Response(JSON.stringify({
    error: message
  }), {
    status,
    headers: {
      ...corsHeaders,
      "Content-Type": "application/json"
    }
  });
}
function getPublicIdFromUrl(url) {
  try {
    const u = new URL(url);
    let path = u.pathname.split("/upload/")[1];
    if (!path) return null;
    return path.split(/[?#]/)[0];
  } catch  {
    return null;
  }
}
async function enhanceProductImage(productSubmissionId, imageUrl) {
  try {
    const originalFetch = await fetch(imageUrl);
    if (!originalFetch.ok) throw new Error("Original image not accessible");
    // Call enhancement API for transformation
    const enhancementResponse = await fetch(ENHANCE_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        image_url: imageUrl
      })
    });
    if (!enhancementResponse.ok) {
      const errorText = await enhancementResponse.text();
      throw new Error(`Enhancement API error: ${enhancementResponse.status} - ${errorText}`);
    }
    const enhancementData = await enhancementResponse.json();
    if (!enhancementData.success) {
      throw new Error("Enhancement failed: " + (enhancementData.error || "Unknown error"));
    }
    if (!enhancementData.enhanced_image_url) {
      throw new Error("No enhanced image URL received from enhancement API");
    }
    
    // Use the Cloudinary URL directly from enhancement response
    const enhancedImageUrl = enhancementData.enhanced_image_url;
    
    const { error: dbError } = await supabase.from("product_submission_image_enhancements").insert({
      original_image_url: imageUrl,
      enhanced_image_url: enhancedImageUrl,
      enhancement_metadata: enhancementData.enhancement_factors,
      submission_id: productSubmissionId
    });
    if (dbError) throw new Error("Failed to insert into Supabase: " + dbError.message);
    return {
      success: true,
      submission_id: productSubmissionId,
      original_url: imageUrl,
      enhanced_url: enhancedImageUrl
    };
  } catch (err) {
    return {
      success: false,
      submission_id: productSubmissionId,
      original_url: imageUrl,
      error: err.message
    };
  }
}
async function batchEnhanceImages(images, productSubmissionId) {
  const results = [];
  for(let i = 0; i < images.length; i++){
    const result = await enhanceProductImage(productSubmissionId, images[i]);
    results.push(result);
    await new Promise((r)=>setTimeout(r, 1000));
  }
  return {
    success: true,
    results,
    message: `✅ ${results.filter((r)=>r.success).length} succeeded, ❌ ${results.filter((r)=>!r.success).length} failed.`
  };
}
Deno.serve(async (req)=>{
  if (req.method === "OPTIONS") {
    return new Response("ok", {
      headers: corsHeaders
    });
  }
  if (req.method === "POST") {
    try {
      const { media, id } = await req.json();
      if (!media?.images?.length) return errorResponse("No images found in request");
      const result = await batchEnhanceImages(media.images, id);
      return new Response(JSON.stringify(result), {
        headers: {
          ...corsHeaders,
          "Content-Type": "application/json"
        },
        status: 200
      });
    } catch (err) {
      return errorResponse("Server Error: " + err.message, 500);
    }
  }
  return new Response("Method Not Allowed", {
    status: 405,
    headers: {
      ...corsHeaders,
      "Content-Type": "application/json"
    }
  });
});
